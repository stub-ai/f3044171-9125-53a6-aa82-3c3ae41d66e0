{"config":{"system_prompt":"","model":"","temperature":0,"top_p":1,"framework":"nextjs-page-tailwind"},"prompts":[{"prompt":"I need a function in C++ that resets the deck for a card game after each round. The game deals 9 cards to each player, and players select a card and pass their hand until all cards are selected. The game ends when the last card is selected, and the deck needs to reset if the user wants to play all three rounds. The deck is a vector of Card objects, and the game has three players. The function should clear the existing deck, recreate it, and ensure it's ready for a new round.","md5":"03050037b6cfd70ad688da2ab93a68db"},{"prompt":"/*\n * board.cpp\n * CS11 Sushi Go\n */\n\n#include \"board.h\"\n\n//constructor\nBoard::Board(){\n    clearBoard();\n}\n\n/* drawBoard\n * Input: A pointer to an array of 3 Players, p\n *        A number indicating the index of the player whose turn\n *        it currently is (0, 1, or 2), turn\n * Description: Draws all of board elements for a given players turn\n * Output: Prints the board to standard output\n */\nvoid Board::drawBoard(Player *players, int turn){\n    //reset the screen\n    clearBoard();\n    screen_clear();\n    screen_home();\n    \n    for(int i = 0; i < PLAYER_COUNT; i++){\n        if(turn >= 0){\n            drawPlayer(i, players + i, turn);\n        }else{\n            drawRound(i, players + i);\n        }\n    }\n\n    //print out the finished board\n    for(int i = 0; i < BOARD_HEIGHT - 6; i++){\n        for(int j = 0; j < BOARD_WIDTH; j++){\n            if(board_color[i][j] != \"white\"){\n                screen_fg(board_color[i][j]);\n            }\n            cout << board[i][j];\n            screen_fg(\"white\");\n        }\n        cout << endl;\n   } \n   cout << endl; \n}\n\n/* drawScore\n * Input: A pointer to an array of 3 Players, p\n * Description: Draws a summary of the round's scoring\n * Output: Prints the summary to standard output\n */\nvoid Board::drawScore(Player *players){\n    drawBoard(players, -1);\n}\n\n//draws a player's chosen and unplayed hands\nvoid Board::drawPlayer(int p_index, Player *player, int turn){\n    int chosen_size;\n    bool myTurn = (p_index == turn) ? true : false;\n    int vpos = (p_index * (CARD_HEIGHT + 3)) + p_index;\n    Vector *p_hand = player->getPassingHand();\n    Vector *r_hand = player->getRevealedCards();\n\n    //draw player heading\n    vpos++;\n    string label = \"Player \" + to_string(p_index + 1);\n    drawLabel(vpos, 4, label);\n    label = \"Total Points: \" + to_string(player->getScore());\n    drawLabel(vpos, 20, label);\n    label = \"Total Puddings: \" + to_string(player->getPuddingCount());\n    drawLabel(vpos, 40, label);\n    vpos++;\n\n    //draw the chosen cards that have been revealed to all players\n    chosen_size = r_hand->size();\n    for(int i = 0; i < chosen_size; i++){\n        drawCard(vpos, (i * CARD_WIDTH) + 1, i + 1, r_hand->at(i), false);\n    }\n    \n    //draw the unselected cards in the passing hand\n    for(int i = 0; i < p_hand->size(); i++){\n        int hpos = ((i + chosen_size) * CARD_WIDTH) + 1;\n        if(myTurn){\n            drawCard(vpos, hpos, i + 1, p_hand->at(i), true);\n        }else{\n            drawCard(vpos, hpos, 0, nullptr, true);\n        }\n    }\n}\n\n//draws a summary of a players played cards\nvoid Board::drawRound(int p_index, Player *player){\n    int vpos = (p_index * (CARD_HEIGHT + 3)) + p_index;\n    int hpos = 1;\n    int mask[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n    string label;\n    Vector *p_deck = player->getRevealedCards();\n\n    //draw player heading\n    vpos++;\n    label = \"Player \" + to_string(p_index + 1);\n    drawLabel(vpos, 4, label);\n    label = \"Total Points: \" + to_string(player->getScore());\n    drawLabel(vpos, 20, label);\n    label = \"Total Puddings: \" + to_string(player->getPuddingCount());\n    drawLabel(vpos, 40, label);\n    vpos--;\n\n    //draw pudding total\n    int pudding_count = 0;\n    for(int i = 0; i < p_deck->size(); i++){\n        if(p_deck->at(i)->getSushiType() == \"Pudding\"){\n            pudding_count++;\n        }\n    }\n\n    if(pudding_count > 0){\n        drawPudding(vpos, hpos);\n        label = \"x\" + to_string(pudding_count);\n        drawLabel(vpos + CARD_HEIGHT, hpos + CARD_WIDTH/2 - 1, label);\n        hpos += CARD_WIDTH;\n    }\n\n    //draw maki total\n    int maki_count = 0;\n    for(int i = 0; i < p_deck->size(); i++){\n        if(p_deck->at(i)->getSushiType() == \"Maki\"){\n            maki_count += p_deck->at(i)->getMakiCount();\n        }\n    }\n\n    if(maki_count > 0){\n        drawMaki(vpos, hpos, -1);\n        label = \"x\" + to_string(maki_count);\n        drawLabel(vpos + CARD_HEIGHT, hpos + CARD_WIDTH/2 - 1, label);\n        hpos += CARD_WIDTH;\n    }\n\n    //draw tempura total\n    int tempura_count = 0;\n    for(int i = 0; i < p_deck->size(); i++){\n        if(p_deck->at(i)->getSushiType() == \"Tempura\"){\n            tempura_count++;\n        }\n    }\n\n    if(tempura_count > 0){\n        drawTempura(vpos, hpos);\n        label = \"x\" + to_string(tempura_count);\n        drawLabel(vpos + CARD_HEIGHT, hpos + CARD_WIDTH/2 - 1, label);\n        hpos += CARD_WIDTH;\n    }\n\n    //draw sashimi total\n    int sashimi_count = 0;\n    for(int i = 0; i < p_deck->size(); i++){\n        if(p_deck->at(i)->getSushiType() == \"Sashimi\"){\n            sashimi_count++;\n        }\n    }\n\n    if(sashimi_count > 0){\n        drawSashimi(vpos, hpos);\n        label = \"x\" + to_string(sashimi_count);\n        drawLabel(vpos + CARD_HEIGHT, hpos + CARD_WIDTH/2 - 1, label);\n        hpos += CARD_WIDTH;\n    }\n\n    //draw dumpling total\n    int dumpling_count = 0;\n    for(int i = 0; i < p_deck->size(); i++){\n        if(p_deck->at(i)->getSushiType() == \"Dumpling\"){\n            dumpling_count++;\n        }\n    }\n\n    if(dumpling_count > 0){\n        drawDumpling(vpos, hpos);\n        label = \"x\" + to_string(dumpling_count);\n        drawLabel(vpos + CARD_HEIGHT, hpos + CARD_WIDTH/2 - 1, label);\n        hpos += CARD_WIDTH;\n    }\n\n    //draw nigiri total\n    for(int i = 0; i < p_deck->size(); i++){\n        bool wasabi = false;\n        string type = p_deck->at(i)->getSushiType();\n\n        if(type == \"Egg-Nigiri\" ||\n           type == \"Salmon-Nigiri\" ||\n           type == \"Squid-Nigiri\"){\n            //see if it can be dipped in wasabi\n            for(int j = i - 1; j >= 0; j--){\n                if(p_deck->at(j)->getSushiType() == \"Wasabi\" &&\n                   mask[j] == 0){\n                    mask[j] = 1;\n                    wasabi = true;\n                    break;\n                }\n            }\n\n            drawNigiri(vpos, hpos, type, wasabi);\n            hpos += CARD_WIDTH;\n        }\n    }\n}\n\n//draws text at the supplied location\nvoid Board::drawLabel(int vpos, int hpos, string label){\n    for(int i = 0; i < (int)label.length(); i++){\n        board[vpos][hpos + i] = label[i];\n    }\n}\n\n//draws a single sushi card\nvoid Board::drawCard(int vpos, int hpos, int index, Card *c, bool unplayed){\n    string top = \"  _________  \";\n    string second = \" /         \\\\ \";\n    string blank = \"|           |\";\n    string bottom = \" \\\\_________/ \";\n\n    //draw the basic card outline\n    if(unplayed){\n        for(int i = 0; i < CARD_WIDTH; i++){\n            board[vpos][hpos + i] = top[i];\n            board[vpos + 1][hpos + i] = second[i];\n\n            for(int j = 2; j < CARD_HEIGHT; j++){\n                board[vpos + j][hpos + i] = blank[i];\n            }\n            board[vpos + CARD_HEIGHT][hpos + i] = bottom[i];\n        }\n\n        if(c == nullptr){\n            drawBlank(vpos, hpos);\n            return;\n        }\n\n        board[vpos + 1][hpos + 4] = '-';\n        board[vpos + 1][hpos + 6] = index + 48;\n        board[vpos + 1][hpos + 8] = '-';\n    }\n\n    string sushi_type = c->getSushiType();\n    if(sushi_type == \"Pudding\"){\n        drawPudding(vpos, hpos);\n    }else if(sushi_type == \"Wasabi\"){\n        drawWasabi(vpos, hpos);\n    }else if(sushi_type == \"Dumpling\"){\n        drawDumpling(vpos, hpos);\n    }else if(sushi_type == \"Sashimi\"){\n        drawSashimi(vpos, hpos);\n    }else if(sushi_type == \"Tempura\"){\n        drawTempura(vpos, hpos);\n    }else if(sushi_type == \"Maki\"){\n        drawMaki(vpos, hpos, c->getMakiCount());\n    }else if(sushi_type == \"Chopsticks\"){\n        drawChopsticks(vpos, hpos);\n    }else if(sushi_type == \"Squid-Nigiri\"){\n        drawNigiri(vpos, hpos, sushi_type, false);\n    }else if(sushi_type == \"Salmon-Nigiri\"){\n        drawNigiri(vpos, hpos, sushi_type, false);\n    }else if(sushi_type == \"Egg-Nigiri\"){\n        drawNigiri(vpos, hpos, sushi_type, false);\n    }else{\n        cerr << \"ERROR: Unknown card type (\"\n             << c->getSushiType() << \")\" << endl;\n    }\n}\n\n//draws a face-down card\nvoid Board::drawBlank(int vpos, int hpos){\n    string top = \"SUSHI\";\n    string bottom = \" GO! \";\n\n    int width = top.length();\n    for(int i = 0; i < width; i++){\n        board[vpos + 4][hpos + 4 + i] = top[i];\n    }\n\n    width = bottom.length();\n    for(int i = 0; i < width; i++){\n        board[vpos + 5][hpos + 4 + i] = bottom[i];\n    }\n}\n\n//draws a nigiri icon\nvoid Board::drawNigiri(int vpos, int hpos, string type, bool wasabi){\n    vpos += 3;\n    hpos += 2;\n    string nigiri_img[4];\n    nigiri_img[0] = \"  ________\";\n    nigiri_img[1] = \" /_/_/_/_/\";\n    nigiri_img[2] = \"/       / \";\n    nigiri_img[3] = \"\\\\______/  \";\n\n    int width = nigiri_img[0].length();\n    for(int i = 0; i < 4; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = nigiri_img[i][j];\n            if(i < 2){\n                if(type == \"Squid-Nigiri\"){\n                    board_color[vpos + i][hpos + j] = \"blue\";\n                }else if(type == \"Salmon-Nigiri\"){\n                    board_color[vpos + i][hpos + j] = \"pink\";\n                }else if(type == \"Egg-Nigiri\"){\n                    board_color[vpos + i][hpos + j] = \"yellow\";\n                }\n            }else{\n                if(wasabi){\n                    board_color[vpos + i][hpos + j] = \"green\";\n                }\n            }\n        }\n    }\n}\n\n//draws a chopsticks icon\nvoid Board::drawChopsticks(int vpos, int hpos){\n    vpos += 3;\n    hpos += 3;\n    string chopsticks_img[5];\n    chopsticks_img[0] = \"\\\\     /\";\n    chopsticks_img[1] = \" \\\\   / \";\n    chopsticks_img[2] = \"  \\\\ /  \";\n    chopsticks_img[3] = \"   X   \";\n    chopsticks_img[4] = \"  / \\\\  \";\n    \n\n    int width = chopsticks_img[0].length();\n    for(int i = 0; i < 5; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = chopsticks_img[i][j];\n            board_color[vpos + i][hpos + j] = \"yellow\";\n        }\n    }\n}\n\n//draws a maki icon\nvoid Board::drawMaki(int vpos, int hpos, int count){\n    vpos += 2;\n    hpos += 2;\n    string maki_img[6];\n    maki_img[0] = \"  _____  \";\n    maki_img[1] = \" / ___ \\\\ \";\n    maki_img[2] = \"| /   \\\\ |\";\n    maki_img[3] = \"| |   | |\";\n    maki_img[4] = \"| \\\\___/ |\";\n    maki_img[5] = \" \\\\_____/ \";\n\n    int width = maki_img[0].length();\n    for(int i = 0; i < 6; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = maki_img[i][j];\n            if(i < 1 || i > 4){\n                board_color[vpos + i][hpos + j] = \"green\";\n            }else if((i < 2 || i > 3) && (j < 2 || j > 6)){\n                board_color[vpos + i][hpos + j] = \"green\";\n            }else if(j < 1 || j > 7){\n                board_color[vpos + i][hpos + j] = \"green\";\n            }\n        }\n    }\n\n    if(count > 0){\n        board[vpos + 3][hpos + 4] = count + 48;\n    }else{\n        board[vpos + 3][hpos + 4] = '*';\n    }\n    board_color[vpos + 3][hpos + 4] = \"pink\";\n}\n\n//draws a tempura icon\nvoid Board::drawTempura(int vpos, int hpos){\n    vpos += 2;\n    hpos += 3;\n    string tempura_img[6];\n    tempura_img[0] = \"  __  \";\n    tempura_img[1] = \" /^^\\\\ \";\n    tempura_img[2] = \" \\\\^^^\\\\\";\n    tempura_img[3] = \"  |^^|\";\n    tempura_img[4] = \"   |^/\";\n    tempura_img[5] = \"   VV \";\n\n    int width = tempura_img[0].length();\n    for(int i = 0; i < 6; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = tempura_img[i][j];\n            if(i > 4){\n                board_color[vpos + i][hpos + j] = \"pink\";\n            }else{\n                board_color[vpos + i][hpos + j] = \"yellow\";\n            }\n        }\n    }\n}\n\n//draws a pudding icon\nvoid Board::drawPudding(int vpos, int hpos){\n    vpos += 3;\n    hpos += 2;\n    string pudding_img[4];\n    pudding_img[0] = \"  __*__  \";\n    pudding_img[1] = \" /vvvvv\\\\ \";\n    pudding_img[2] = \"/vvvvvvv\\\\\";\n    pudding_img[3] = \"|_______|\";\n\n    int width = pudding_img[0].length();\n    for(int i = 0; i < 4; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = pudding_img[i][j];\n            if(i < 3){\n                board_color[vpos + i][hpos + j] = \"blue\";\n            }else{\n                board_color[vpos + i][hpos + j] = \"yellow\";\n            }\n        }\n    }\n\n    board_color[vpos][hpos + 4] = \"red\";\n}\n\n//draws a sashimi icon\nvoid Board::drawSashimi(int vpos, int hpos){\n    vpos += 2;\n    hpos += 1;\n    string sashimi_img[5];\n    sashimi_img[0] = \" _____     \";\n    sashimi_img[1] = \"|\\\\    \\\\__  \";\n    sashimi_img[2] = \"| \\\\____\\\\ \\\\ \";\n    sashimi_img[3] = \" \\\\|____|__\\\\\";\n    sashimi_img[4] = \"    \\\\|____|\";\n\n    int width = sashimi_img[0].length();\n    for(int i = 0; i < 5; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = sashimi_img[i][j];\n            if(i > 3 || j > 7){\n                board_color[vpos + i][hpos + j] = \"red\";\n            }else{\n                board_color[vpos + i][hpos + j] = \"pink\";\n            }\n        }\n    }\n    board_color[vpos + 1][hpos + 7] = \"red\";\n\n}\n\n//draws a wasabi icon\nvoid Board::drawWasabi(int vpos, int hpos){\n    vpos += 3;\n    hpos += 2;\n    string wasabi_img[4];\n    wasabi_img[0] = \"   (%)   \";\n    wasabi_img[1] = \"  (%%%)  \";\n    wasabi_img[2] = \" (%%%%%) \";\n    wasabi_img[3] = \"(%%%%%%%)\";\n\n    int width = wasabi_img[0].length();\n    for(int i = 0; i < 4; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = wasabi_img[i][j];\n            board_color[vpos + i][hpos + j] = \"green\";\n        }\n    }\n}\n\n//draws a dumpling icon\nvoid Board::drawDumpling(int vpos, int hpos){\n    vpos += 3;\n    hpos += 2;\n    string wasabi_img[4];\n    wasabi_img[0] = \" /^^^^^\\\\ \";\n    wasabi_img[1] = \"| o   o |\";\n    wasabi_img[2] = \"| \\\\___/ |\";\n    wasabi_img[3] = \" \\\\_____/ \";\n\n    int width = wasabi_img[0].length();\n    for(int i = 0; i < 4; i++){\n        for(int j = 0; j < width; j++){\n            board[vpos + i][hpos + j] = wasabi_img[i][j];\n            if(i < 3 && j > 1 && j < width - 2){\n                board_color[vpos + i][hpos + j] = \"yellow\";\n            }\n        }\n    }\n\n}\n\n//clear the board display\nvoid Board::clearBoard(){\n    for(int i = 0; i < BOARD_HEIGHT; i++){\n        for(int j = 0; j < BOARD_WIDTH; j++){\n            board[i][j] = ' ';\n            board_color[i][j] = \"white\";\n        }\n   }  \n}\n\n//formats the point total to align nicely\nstring Board::formatScore(int score){\n    if(score == 1){\n        return \" \" + to_string(score) + \" point \";\n    }else if(score < 10 && score > -1){\n        return \" \" + to_string(score) + \" points\";\n    }else{\n        return to_string(score) + \" points\";\n    }\n}\n\n/* drawWinner\n * Input: A pointer to an array of 3 Players, p\n *        A number indicating the index of the player who won, winner\n *        (A winner value of -1 indicates a tie)\n * Description: Draws a final display indicating which player won the game\n * Output: Prints the display to standard output\n */\nvoid Board::drawWinner(Player *players, int winner){\n    int offset;\n    string score = \" FINAL SCORE        \";\n    string p1 = \" Player 1: \" + formatScore(players[0].getScore());\n    string p2 = \" Player 2: \" + formatScore(players[1].getScore());\n    string p3 = \" Player 3: \" + formatScore(players[2].getScore());\n    clearBoard();\n\n    string player[6];\n    player[0] = \"__________.__                             \"; \n    player[1] = \"\\\\______   \\\\  | _____  ___.__. ___________ \"; \n    player[2] = \" |     ___/  | \\\\__  \\\\<   |  |/ __ \\\\_  __ \\\\\"; \n    player[3] = \" |    |   |  |__/ __ \\\\\\\\___  \\\\  ___/|  | \\\\/\"; \n    player[4] = \" |____|   |____(____  / ____|\\\\___  >__|   \"; \n    player[5] = \"                    \\\\/\\\\/         \\\\/       \"; \n\n    string wins[6];\n    wins[0] = \"  __      __.__              ._.\";\n    wins[1] = \" /  \\\\    /  \\\\__| ____   _____| |\";\n    wins[2] = \" \\\\   \\\\/\\\\/   /  |/    \\\\ /  ___/ |\";\n    wins[3] = \"  \\\\        /|  |   |  \\\\\\\\___ \\\\ \\\\|\";\n    wins[4] = \"   \\\\__/\\\\  / |__|___|  /____  >__\";\n    wins[5] = \"        \\\\/          \\\\/     \\\\/ \\\\/\";\n\n    string one[6];\n    one[0] = \"  ____  \";\n    one[1] = \" /_   | \";\n    one[2] = \"  |   | \";\n    one[3] = \"  |   | \";\n    one[4] = \"  |___| \";\n    one[5] = \"        \";\n\n    string two[6];\n    two[0] = \" ________  \";\n    two[1] = \" \\\\_____  \\\\ \";\n    two[2] = \"  /  ____/ \";\n    two[3] = \" /       \\\\ \";\n    two[4] = \" \\\\_______ \\\\\";\n    two[5] = \"         \\\\/\";\n\n    string three[6];\n    three[0] = \" ________  \";\n    three[1] = \" \\\\_____  \\\\ \";\n    three[2] = \"   _(__  < \";\n    three[3] = \"  /       \\\\\";\n    three[4] = \" /______  /\";\n    three[5] = \"        \\\\/ \";\n\n    string lame[6];\n    lame[0] = \".____                           \";\n    lame[1] = \"|    |   _____    _____   ____  \";\n    lame[2] = \"|    |   \\\\__  \\\\  /     \\\\_/ __ \\\\ \";\n    lame[3] = \"|    |___ / __ \\\\|  Y Y  \\\\  ___/ \";\n    lame[4] = \"|_______ (____  /__|_|  /\\\\___  >\";\n    lame[5] = \"        \\\\/    \\\\/      \\\\/     \\\\/ \";\n\n    string *winner_p;\n    if(winner == 0){\n        winner_p = one;\n    }else if(winner == 1){\n        winner_p = two;\n    }else if(winner == 2){\n        winner_p = three;\n    }\n\n    //print the final scores\n    for(int j = 0; j < (int)score.length(); j++){\n        board[1][j] = score[j];\n        board[2][j] = p1[j];\n        board[3][j] = p2[j];\n        board[4][j] = p3[j];\n    }\n    offset = 25;\n\n    if(winner < 0){\n        //print the wins text\n        for(int i = 0; i < 6; i++){\n            for(int j = 0; j < (int)lame[i].length(); j++){\n                board[i][j + offset] = lame[i][j];\n            }\n        }\n    }else{\n        //print the player text\n        for(int i = 0; i < 6; i++){\n            for(int j = 0; j < (int)player[i].length(); j++){\n                board[i][j + offset] = player[i][j];\n            }\n        }\n        offset += player[0].length() + 1;\n\n        //print the winner number\n        for(int i = 0; i < 6; i++){\n            for(int j = 0; j < (int)winner_p[i].length(); j++){\n                board[i][j + offset] = winner_p[i][j];\n            }\n        }\n        offset += winner_p[0].length();\n\n        //print the wins text\n        for(int i = 0; i < 6; i++){\n            for(int j = 0; j < (int)wins[i].length(); j++){\n                board[i][j + offset] = wins[i][j];\n            }\n        }\n    }\n\n    for(int i = 0; i < 6; i++){\n        for(int j = 0; j < BOARD_WIDTH; j++){\n            if(board_color[i][j] != \"white\"){\n                screen_fg(board_color[i][j]);\n            }\n            cout << board[i][j];\n            screen_fg(\"white\");\n        }\n        cout << endl;\n   } \n   cout << endl; \n}","md5":"bfe7b646f68d0912d4e10b8a5474089c"}]}